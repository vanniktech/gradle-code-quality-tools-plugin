import org.gradle.api.internal.classpath.ModuleRegistry
import org.gradle.api.internal.project.ProjectInternal

buildscript {
  ext.kotlinVersion = '2.1.21'
  ext.androidGradlePluginVersion = '8.10.1'

  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath 'com.vanniktech:gradle-code-quality-tools-plugin:0.24.0'
    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.32.0'
  }
}

apply plugin: 'java-library'
apply plugin: 'java-gradle-plugin'
apply plugin: 'kotlin'
apply plugin: 'com.vanniktech.code.quality.tools'
apply plugin: "com.vanniktech.maven.publish"

validatePlugins {
  enableStricterValidation = true
}

codeQualityTools {
  ktlint {
    toolVersion = '1.2.1'
  }
  detekt {
    enabled = false
  }
  pmd {
    enabled = false
  }
  checkstyle {
    enabled = false
  }
  cpd {
    enabled = false
  }
  kotlin {
    allWarningsAsErrors = false
  }
}

gradlePlugin {
  plugins {
    codeQualityToolsPlugin {
      id = 'com.vanniktech.code.quality.tools'
      implementationClass = 'com.vanniktech.code.quality.tools.CodeQualityToolsPlugin'
    }
  }
}

repositories {
  mavenCentral()
  google()
  gradlePluginPortal()
}

configurations {
  fixtureClasspath
}

// Append any extra dependencies to the test fixtures via a custom configuration classpath. This
// allows us to apply additional plugins in a fixture while still leveraging dependency resolution
// and de-duplication semantics.
tasks.getByName('pluginUnderTestMetadata').getPluginClasspath().from(configurations.fixtureClasspath)

dependencies {
  api gradleApi()
  api 'de.aaschmid:gradle-cpd-plugin:3.5'

  compileOnly "com.android.tools.build:gradle:$androidGradlePluginVersion"
  compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

  testImplementation "com.android.tools.build:gradle:$androidGradlePluginVersion"
  testImplementation 'junit:junit:4.13.2'
  testImplementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

  fixtureClasspath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  fixtureClasspath "com.android.tools.build:gradle:$androidGradlePluginVersion"

  // https://github.com/gradle/gradle/issues/16774#issuecomment-893493869
  def toolingApiBuildersJar = (project as ProjectInternal).services.get(ModuleRegistry.class)
    .getModule("gradle-tooling-api-builders")
    .classpath
    .asFiles
    .first()
  testRuntimeOnly(files(toolingApiBuildersJar))
}

kotlin {
  jvmToolchain {
    languageVersion.set(JavaLanguageVersion.of(17))
  }
}

tasks.withType(Test) {
  testLogging {
    testLogging.exceptionFormat = 'full'
  }
}
